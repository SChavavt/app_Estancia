import streamlit as st
import pandas as pd
import base64
from github import Github
from io import BytesIO
from datetime import datetime
from smartcore import calcular_smartcore  # tu m√≥dulo

# ------------------------------
# CONFIGURACI√ìN DE LA APP
# ------------------------------
st.set_page_config(
    page_title="Smart Core App ‚Äì Estancia Profesional",
    layout="wide",
    page_icon="üß†"
)

st.title("üß† Smart Core ‚Äì Evaluador de Preferencias y Productos")

st.markdown("""
Esta app calcula tu **Smart Score** con base en un cuestionario de preferencias
y muestra un ranking personalizado de productos seg√∫n tus resultados.
""")

# ------------------------------
# 1Ô∏è‚É£ FORMULARIO DEL CUESTIONARIO
# ------------------------------
st.header("1Ô∏è‚É£ Cuestionario de preferencias")

st.info("Responde las siguientes preguntas para calcular tu Smart Score:")

respuestas = {}
preguntas = [
    ("Salud", "¬øQu√© tan importante es para ti que un producto sea saludable?"),
    ("Sabor", "¬øQu√© tanto priorizas el sabor sobre la salud?"),
    ("Precio", "¬øQu√© tan importante es el precio al elegir un producto?"),
    ("Etiqueta", "¬øLees las etiquetas nutricionales antes de comprar?"),
    ("Sostenibilidad", "¬øTe interesa que el empaque sea sostenible o ecol√≥gico?"),
    ("Innovaci√≥n", "¬øTe atraen los productos nuevos o innovadores?"),
    ("Marca", "¬øPrefieres marcas conocidas sobre marcas nuevas?"),
    ("Disponibilidad", "¬øTiendes a elegir lo que est√© m√°s disponible en la tienda?"),
    ("Recomendaciones", "¬øQu√© tanto influye la recomendaci√≥n de otros en tu decisi√≥n?"),
    ("NutriScore", "¬øConf√≠as en sistemas de puntuaci√≥n como NutriScore o SmartScore?")
]

for clave, texto in preguntas:
    respuestas[clave] = st.slider(texto, 1, 5, 3)

# ------------------------------
# 2Ô∏è‚É£ C√ÅLCULO DEL SMART SCORE
# ------------------------------
if st.button("üßÆ Calcular Smart Score"):
    with st.spinner("Calculando tu Smart Score..."):
        try:
            smart_score = calcular_smartcore(respuestas)
        except Exception:
            # Si smartcore.py no tiene c√°lculo, usar promedio simple
            smart_score = round(sum(respuestas.values()) / len(respuestas) * 20, 2)

    st.success(f"‚úÖ Tu Smart Score es: **{smart_score} / 100**")

    # ------------------------------
    # 3Ô∏è‚É£ RANKING DE PRODUCTOS
    # ------------------------------
    st.header("2Ô∏è‚É£ Ranking de Productos por Categor√≠a")

    archivos = {
        "Ready to Eat": "data/Productos_ReadyToEat_SmartScore.xlsx",
        "Mac & Cheese": "data/Productos_Mac_and_Cheese_SmartScore.xlsx",
        "Instant Noodles": "data/Productos_Instant_Noodles_SmartScore.xlsx",
    }

    all_products = []
    for cat, path in archivos.items():
        df = pd.read_excel(path)
        df["Categoria"] = cat
        all_products.append(df)
    df_all = pd.concat(all_products)

    # Asegurar que haya una columna 'SmartScore' o similar
    col_score = [c for c in df_all.columns if "Score" in c][0]
    df_all["Diferencia"] = abs(df_all[col_score] - smart_score)

    ranking = (
        df_all.sort_values("Diferencia")
        .groupby("Categoria")
        .head(3)
        .reset_index(drop=True)
    )

    st.subheader("üèÜ Productos m√°s afines a ti:")
    st.dataframe(ranking[["Categoria", df_all.columns[0], col_score, "Diferencia"]])

    # ------------------------------
    # 4Ô∏è‚É£ GUARDAR RESULTADOS EN GITHUB
    # ------------------------------
    st.header("3Ô∏è‚É£ Guardado de Resultados")
    usuario = st.text_input("Tu nombre o identificador:", "")
    if usuario and st.button("üíæ Guardar resultados"):
        try:
            g = Github(st.secrets["GITHUB_TOKEN"])
            repo = g.get_user().get_repo("app_Estancia")
            ruta_archivo = "data/Resultados_SmartScore.xlsx"

            try:
                contents = repo.get_contents(ruta_archivo)
                excel_data = base64.b64decode(contents.content)
                df = pd.read_excel(BytesIO(excel_data))
            except Exception:
                df = pd.DataFrame(columns=["Usuario", "Fecha", "SmartScore", "TopProducto"])

            nuevo = pd.DataFrame([{
                "Usuario": usuario,
                "Fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "SmartScore": smart_score,
                "TopProducto": ranking.iloc[0, 0]
            }])
            df = pd.concat([df, nuevo], ignore_index=True)

            buffer = BytesIO()
            df.to_excel(buffer, index=False)
            if "contents" in locals():
                repo.update_file(
                    contents.path,
                    "Actualizaci√≥n de resultados desde Streamlit",
                    buffer.getvalue(),
                    contents.sha
                )
            else:
                repo.create_file(
                    ruta_archivo,
                    "Creaci√≥n inicial de Resultados_SmartScore.xlsx",
                    buffer.getvalue()
                )
            st.success("‚úÖ Resultados guardados correctamente en GitHub.")
        except Exception as e:
            st.error(f"‚ùå No se pudo guardar en GitHub: {e}")

# ------------------------------
# PIE DE P√ÅGINA
# ------------------------------
st.markdown("---")
st.caption("Desarrollado como parte de la Estancia Profesional ‚Äì Smart Core Project ¬© 2025")
